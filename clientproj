import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.Scanner;
//////////////////////////////////////////////////
import java.awt.BorderLayout;
import java.awt.Color;
import java.awt.Font;
import java.awt.GridBagConstraints;
import java.awt.GridBagLayout;
import java.awt.Insets;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import javax.swing.JButton;
import javax.swing.JFrame;
import javax.swing.JLabel;
import javax.swing.JPanel;
import javax.swing.JScrollPane;
import javax.swing.JTextArea;
import javax.swing.JTextField;
import javax.swing.SwingUtilities;
import javax.swing.UIManager;


public class Client {
    String      appName     = "D&D v1";
    Client     Client;
    JFrame      newFrame    = new JFrame(appName);
    JButton     sendMessage;
    JTextField  messageBox;
    JTextArea   chatBox;
    JTextField  usernameChooser;
    JTextField  strChooser;
    JTextField  intlChooser;
    JTextField  chaChooser;
    JTextField  dexChooser;
    JTextField  conChooser;
    JTextField  wisChooser;
    JFrame      preFrame;



    public void preDisplay() {
        newFrame.setVisible(false);
        preFrame = new JFrame(appName);
        usernameChooser = new JTextField(15);
        strChooser = new JTextField(3);
        intlChooser = new JTextField(3);
        chaChooser = new JTextField(3);
        dexChooser = new JTextField(3);
        conChooser = new JTextField(3);
        wisChooser = new JTextField(3);
        JLabel chooseUsernameLabel = new JLabel("Enter a name:");
        JLabel chooseStrLabel = new JLabel("Enter Str:");
        JLabel chooseIntlLabel = new JLabel("Enter Int:");
        JLabel chooseChaLabel = new JLabel("Enter Cha:");
        JLabel chooseDexLabel = new JLabel("Enter Dex:");
        JLabel chooseConLabel = new JLabel("Enter Con:");
        JLabel chooseWisLabel = new JLabel("Enter Wis:");
        JButton enterServer = new JButton("Enter Chat Server");
        enterServer.addActionListener(new enterServerButtonListener());
        JPanel prePanel = new JPanel(new GridBagLayout());

        GridBagConstraints preRight = new GridBagConstraints();
        preRight.insets = new Insets(0, 0, 0, 10);
        preRight.anchor = GridBagConstraints.EAST;
        GridBagConstraints preLeft = new GridBagConstraints();
        preLeft.anchor = GridBagConstraints.WEST;
        preLeft.insets = new Insets(0, 10, 0, 10);
        // preRight.weightx = 2.0;
        preRight.fill = GridBagConstraints.HORIZONTAL;
        preRight.gridwidth = GridBagConstraints.REMAINDER;

        prePanel.add(chooseUsernameLabel, preLeft);
        prePanel.add(usernameChooser, preRight);
        prePanel.add(chooseStrLabel, preLeft);
        prePanel.add(strChooser, preRight);
        prePanel.add(chooseIntlLabel, preLeft);
        prePanel.add(intlChooser, preRight);
        prePanel.add(chooseChaLabel, preLeft);
        prePanel.add(chaChooser, preRight);
        prePanel.add(chooseDexLabel, preLeft);
        prePanel.add(dexChooser, preRight);
        prePanel.add(chooseConLabel, preLeft);
        prePanel.add(conChooser, preRight);
        prePanel.add(chooseWisLabel, preLeft);
        prePanel.add(wisChooser, preRight);
        preFrame.add(BorderLayout.CENTER, prePanel);
        preFrame.add(BorderLayout.SOUTH, enterServer);
        preFrame.setSize(300, 300);
        preFrame.setVisible(true);

    }

    public void display() {
        JPanel mainPanel = new JPanel();
        mainPanel.setLayout(new BorderLayout());

        JPanel southPanel = new JPanel();
        southPanel.setBackground(Color.BLUE);
        southPanel.setLayout(new GridBagLayout());

        messageBox = new JTextField(30);
        messageBox.requestFocusInWindow();

        sendMessage = new JButton("Send Message");
        sendMessage.addActionListener(new sendMessageButtonListener());

        chatBox = new JTextArea();
        chatBox.setEditable(false);
        chatBox.setFont(new Font("Serif", Font.PLAIN, 15));
        chatBox.setLineWrap(true);

        mainPanel.add(new JScrollPane(chatBox), BorderLayout.CENTER);

        GridBagConstraints left = new GridBagConstraints();
        left.anchor = GridBagConstraints.LINE_START;
        left.fill = GridBagConstraints.HORIZONTAL;
        left.weightx = 512.0D;
        left.weighty = 1.0D;

        GridBagConstraints right = new GridBagConstraints();
        right.insets = new Insets(0, 10, 0, 0);
        right.anchor = GridBagConstraints.LINE_END;
        right.fill = GridBagConstraints.NONE;
        right.weightx = 1.0D;
        right.weighty = 1.0D;

        southPanel.add(messageBox, left);
        southPanel.add(sendMessage, right);

        mainPanel.add(BorderLayout.SOUTH, southPanel);

        newFrame.add(mainPanel);
        newFrame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        newFrame.setSize(470, 300);
        newFrame.setVisible(true);
    }

    class sendMessageButtonListener implements ActionListener {
        public void actionPerformed(ActionEvent event) {
            if (messageBox.getText().length() < 1) {
                // do nothing
            }
            if (messageBox.getText().equals("roll20")){
              int x = (int)(Math.random()*((20-1)+1))+1;
              String y = Integer.toString(x);
              chatBox.setText("<"+username+">: "+y+"\n");
            }
            if (messageBox.getText().equals("roll12")){
              int x = (int)(Math.random()*((12-1)+1))+1;
              String y = Integer.toString(x);
              chatBox.setText("<"+username+">: "+y+"\n");
            }
            if (messageBox.getText().equals("roll10")){
              int x = (int)(Math.random()*((10-1)+1))+1;
              String y = Integer.toString(x);
              chatBox.setText("<"+username+">: "+y+"\n");
            }
            if (messageBox.getText().equals("roll8")){
              int x = (int)(Math.random()*((8-1)+1))+1;
              String y = Integer.toString(x);
              chatBox.setText("<"+username+">: "+y+"\n");
            }
            if (messageBox.getText().equals("roll6")){
              int x = (int)(Math.random()*((6-1)+1))+1;
              String y = Integer.toString(x);
              chatBox.setText("<"+username+">: "+y+"\n");
            }
            if (messageBox.getText().equals("roll4")){
              int x = (int)(Math.random()*((4-1)+1))+1;
              String y = Integer.toString(x);
              chatBox.setText("<"+username+">: "+y+"\n");
            }
            else if (messageBox.getText().equals(".clear")) {
                chatBox.setText("Cleared all messages\n");
                messageBox.setText("");
            }else {
                chatBox.append("<" + username + ">:  " + messageBox.getText()
                        + "\n");
                messageBox.setText("");
            }
            messageBox.requestFocusInWindow();
        }
    }

    String  username;
    int str;
    int intl;
    int cha;
    int dex;
    int con;
    int wis;
    class enterServerButtonListener implements ActionListener {
        public void actionPerformed(ActionEvent event) {
            username = usernameChooser.getText();
              str = Integer.parseInt(strChooser.getText());
              intl = Integer.parseInt(intlChooser.getText());
              cha = Integer.parseInt(chaChooser.getText());
              dex = Integer.parseInt(dexChooser.getText());
              con = Integer.parseInt(conChooser.getText());
              wis = Integer.parseInt(wisChooser.getText());
            if (username.length() < 1) {
                System.out.println("No!");
            } else {
                preFrame.setVisible(false);
                display();
            }
        }

    }

public static void main(String args[]) throws UnknownHostException, IOException, ClassNotFoundException, InterruptedException{
  SwingUtilities.invokeLater(new Runnable() {
              @Override
              public void run() {
                  try {
                      UIManager.setLookAndFeel(UIManager
                              .getSystemLookAndFeelClassName());
                  } catch (Exception e) {
                      e.printStackTrace();
                  }
                  Client Client = new Client();
                  Client.preDisplay();
              }
          });

    InetAddress address=InetAddress.getLocalHost();
    Socket s1=null;
    String line=null;
    String pname=null;
    BufferedReader br=null;
    BufferedReader is=null;
    PrintWriter os=null;


    try {
        s1=new Socket(address, 3001);
        br= new BufferedReader(new InputStreamReader(System.in));
        is=new BufferedReader(new InputStreamReader(s1.getInputStream()));
        os= new PrintWriter(s1.getOutputStream());
    }catch (IOException e){
        e.printStackTrace();
        System.err.print("IO Exception");
    }

    System.out.println("Enter Message, Enter QUIT to end:");
    String response=null;
    try{
	os.println(pname);
	os.flush();

	System.out.println("Enter a Message:");
        line=br.readLine();
        while(line.compareTo("QUIT")!=0){
//////////////////////////no longer in use
		if(line.equals("roll20")== true){
		roll20();
       		 }
		if(line.equals("roll12")== true){
		roll12();
       		 }
		if(line.equals("roll10")== true){;
		roll10();
       		 }
		if(line.equals("roll8")== true){
		roll8();
       		 }
		if(line.equals("roll6")== true){
		roll6();
       		 }
		if(line.equals("roll4")== true){
		roll4();
////////////////////////////////////////////////////////////
       		 }
                os.println(line);
                os.flush();
                System.out.println(pname+": "+line);
                line=br.readLine();
		}

        }catch(IOException e){
        e.printStackTrace();
        System.out.println("Read Error");
        }finally{
        is.close();
        os.close();
	br.close();
	s1.close();
        System.out.println("Connection Terminated");

    }

}
//dice roll methods no longer in use
static int roll20(){
 int x = (int)(Math.random()*((20-1)+1))+1;
 String y = Integer.toString(x);
 System.out.println(y);
 return x;
}
static int roll12(){
 int x = (int)(Math.random()*((12-1)+1))+1;
 System.out.println(x);
 return x;
}
static int roll10(){
 int x = (int)(Math.random()*((10-1)+1))+1;
 System.out.println(x);
 return x;
}
static int roll8(){
 int x = (int)(Math.random()*((8-1)+1))+1;
 System.out.println(x);
 return x;
}
static int roll6(){
 int x = (int)(Math.random()*((20-1)+1))+1;
 System.out.println(x);
 return x;
}
static int roll4(){
 int x = (int)(Math.random()*((4-1)+1))+1;
 System.out.println(x);
 return x;
}
////////////////////////////////////////////////////////////////////////////
//non functioning stat roll
static int rollstat(int x){
int y= roll20();
System.out.println(x+y);
return y;
}
//////////////////////////////////////////////////////////saving stats as variables no longer in use
static int addStr(){
Scanner sc = new Scanner(System.in);
System.out.println("Enter Strength");
int str = sc.nextInt();
return str;
}
static int addDex(){
Scanner sc = new Scanner(System.in);
System.out.println("Enter Dexterity");
int dex = sc.nextInt();
return dex;
}
static int addCon(){
Scanner sc = new Scanner(System.in);
System.out.println("Enter Constitution");
int con = sc.nextInt();
return con;
}
static int addInt(){
Scanner sc = new Scanner(System.in);
System.out.println("Enter Intelligence");
int intl = sc.nextInt();
return intl;
}
static int addWis(){
Scanner sc = new Scanner(System.in);
System.out.println("Enter Wisdom");
int wis = sc.nextInt();
return wis;
}
static int addCha(){
Scanner sc = new Scanner(System.in);
System.out.println("Enter Charisma");
int cha = sc.nextInt();
return cha;
}
/////////////////////////////////////////////////////////////////////////////////////////
//not function stat rolls
static int rollStr(int y){
int x = rollstat(y);
return x;
}
static int rollDex(int y){
int x = rollstat(y);
return x;
}
static int rollCon(int y){
int x = rollstat(y);
return x;
}
static int rollInt(int y){
int x = rollstat(y);
return x;
}
static int rollCha(int y){
int x = rollstat(y);
return x;
}

}
