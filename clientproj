import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;
import java.io.PrintWriter;
import java.net.InetAddress;
import java.net.Socket;
import java.net.UnknownHostException;
import java.util.Scanner;

public class Client {

public static void main(String args[]) throws UnknownHostException, IOException, ClassNotFoundException, InterruptedException{


    InetAddress address=InetAddress.getLocalHost();
    Socket s1=null;
    String line=null;
    String pname=null;
    BufferedReader br=null;
    BufferedReader is=null;
    PrintWriter os=null;
   double str = 0;
    double cos = 0;
    double intl = 0;
    double wis = 0;
    double cha = 0;
    double dex = 0;

    try {
        s1=new Socket(address, 3001); 
        br= new BufferedReader(new InputStreamReader(System.in));
        is=new BufferedReader(new InputStreamReader(s1.getInputStream()));
        os= new PrintWriter(s1.getOutputStream());
    }catch (IOException e){
        e.printStackTrace();
        System.err.print("IO Exception");
    }
    
    System.out.println("Enter Message, Enter QUIT to end:");
    String response=null;
    try{
	System.out.println("Enter your name:");
        pname = br.readLine(); 
	os.println(pname);
	os.flush();
	addStr();
	addDex();
	addCon();
	addInt();
	addWis();
	addCha();
	System.out.println("Enter a Message:");
        line=br.readLine(); 
        while(line.compareTo("QUIT")!=0){
		if(line.equals("roll20")== true){       			
		roll20();
       		 }
		if(line.equals("roll12")== true){        			
		roll12();
       		 }
		if(line.equals("roll10")== true){;        			
		roll10();
       		 }
		if(line.equals("roll8")== true){       			
		roll8();
       		 }
		if(line.equals("roll6")== true){  			
		roll6();
       		 }
		if(line.equals("roll4")== true){     			
		roll4();
       		 }
                os.println(line);
                os.flush();
                System.out.println(pname+": "+line);     
                line=br.readLine();
		}
        	
        }catch(IOException e){
        e.printStackTrace();
        System.out.println("Read Error");
        }finally{
        is.close();
        os.close();
	br.close();
	s1.close();
        System.out.println("Connection Terminated");

    }

}
//dice roll methods 
static int roll20(){
 int x = (int)(Math.random()*((20-1)+1))+1;
 System.out.println(x);
 return x;
}
static int roll12(){
 int x = (int)(Math.random()*((12-1)+1))+1;
 System.out.println(x);
 return x;
}
static int roll10(){
 int x = (int)(Math.random()*((10-1)+1))+1;
 System.out.println(x);
 return x;
}
static int roll8(){
 int x = (int)(Math.random()*((8-1)+1))+1;
 System.out.println(x);
 return x;
}
static int roll6(){
 int x = (int)(Math.random()*((20-1)+1))+1;
 System.out.println(x);
 return x;
}
static int roll4(){
 int x = (int)(Math.random()*((4-1)+1))+1;
 System.out.println(x);
 return x;
}
//non functioning stat roll
static int rollstat(int x){
int y= roll20();
System.out.println(x+y);
return y;
}
//saving stats as variables 
static int addStr(){
Scanner sc = new Scanner(System.in);
System.out.println("Enter Strength");
int str = sc.nextInt();
return str;
}
static int addDex(){
Scanner sc = new Scanner(System.in);
System.out.println("Enter Dexterity");
int dex = sc.nextInt();
return dex;
}
static int addCon(){
Scanner sc = new Scanner(System.in);
System.out.println("Enter Constitution");
int con = sc.nextInt();
return con;
}
static int addInt(){
Scanner sc = new Scanner(System.in);
System.out.println("Enter Intelligence");
int intl = sc.nextInt();
return intl;
}
static int addWis(){
Scanner sc = new Scanner(System.in);
System.out.println("Enter Wisdom");
int wis = sc.nextInt();
return wis;
}
static int addCha(){
Scanner sc = new Scanner(System.in);
System.out.println("Enter Charisma");
int cha = sc.nextInt();
return cha;
}

//not function stat rolls
static int rollStr(){
int y = rollstat(1);
return y;
}
static double rollDex(){
double x = rollstat(1);
return x;
}
static double rollCon(){
double x = rollstat(1);
return x;
}
static double rollInt(){
double x = rollstat(1);
return x;
}
static double rollCha(){
double x = rollstat(1);
return x;
}
}
